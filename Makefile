TEX_DIRS = $(shell find . -type f -name "main.tex" -exec dirname {} \;)
TYP_DIRS = $(shell find . -type f -name "main.typ" -exec dirname {} \;)
TEX_BUILDS = $(foreach dir,$(TEX_DIRS),build/$(patsubst ./%,%,$(dir)).pdf)
TEX_REFS = $(foreach dir,$(TEX_DIRS),build/$(patsubst ./%,%,$(dir)).ref)
TYP_BUILDS = $(foreach dir,$(TYP_DIRS),build/$(patsubst ./%,%,$(dir)).pdf)
TYP_REFS = $(foreach dir,$(TYP_DIRS),build/$(patsubst ./%,%,$(dir)).ref)

ROOT_DIR = $(shell pwd)

.PHONY: site tex typ clean help remove print

build/%.ref: %/main.typ %/
	@mkdir -p $(@D)
	@git log -1 --format="%ci %H" -- $* > $@

build/%.ref: %/main.tex %/
	@mkdir -p $(@D)
	@git log -1 --format="%ci %H" -- $* > $@

build/%.pdf: %/main.typ %/ $(ROOT_DIR)/note_zh.typ $(ROOT_DIR)/note_en.typ $(ROOT_DIR)/common.typ $(ROOT_DIR)/theorem_en.typ $(ROOT_DIR)/theorem_zh.typ $(ROOT_DIR)/physics.typ $(ROOT_DIR)/slide_zh.typ
	@mkdir -p $(@D)
	typst compile --root $(ROOT_DIR)  $(<D)/main.typ $@

build/%.pdf: %/main.tex %/
	@mkdir -p $(@D)
	latexmk -xelatex -cd $< > /dev/null 2>&1
	@cp $(<D)/main.pdf $@

site: build/index.html

build/assets/: assets/
	@rm -rf $(@D)
	@mkdir -p $(@D)
	cp -r $(<D)/* $(@D)

tex: $(TEX_BUILDS) $(TEX_REFS)

typ: $(TYP_BUILDS) $(TYP_REFS)

build/index.html: typ build/assets/ generate.sh index-template.html
	@mkdir -p $(@D)
	cd $(@D) && ../generate.sh . ../index-template.html

print:
	@for pdf in $(TYP_BUILDS); do \
		echo $$pdf; \
	done
	@for pdf in $(TEX_BUILDS); do \
		echo $$pdf; \
	done

remove:
	-@find build -type f -name "*.pdf" | while read -r pdf; do \
		if ! echo "$(TEX_BUILDS) $(TYP_BUILDS)" | grep -q "$$pdf"; then \
			rm -f "$$pdf"; \
		fi \
	done
	-@find build/ -type d | while read -r dir; do \
		if [ -z "$$(find "$$dir" -mindepth 1 ! -name 'index.html' 2>/dev/null)" ]; then \
			rm -rf "$$dir"; \
		fi \
	done

clean: $(TEX_DIRS)
	@for tex in $(TEX_DIRS); do \
		latexmk -C -cd "$$tex/main.tex" 1>/dev/null; \
	done

help:
	@echo "Available targets:"
	@echo "  site   : Compile all PDFs that are out of date. This will check all source directories for '.tex' and '.typ' files and compile them into PDFs in the 'build/' directory. After that, a static site will be generated"
	@echo "  clean  : Remove all build files and auxiliary files generated by LaTeX. This will not remove the PDF files in the build directory."
	@echo "  help   : Show this help message, providing a brief description of all the makefile targets."
	@echo "  print  : Print all PDF files that will be built. This will not actually build the PDFs, but will show which ones would be built if the 'site' target were run."
	@echo "  remove : Remove all dangling PDF files from the 'build/' directory that no longer have a corresponding '.tex' or '.typ' file in the source tree as well as empty directories."
